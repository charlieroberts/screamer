// @generated by Peggy 4.0.2.
//
// https://peggyjs.org/
(function(root) {
  "use strict";

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { out: peg$parseout };
  var peg$startRuleFunction = peg$parseout;

  var peg$c0 = "//";
  var peg$c1 = "\n";
  var peg$c2 = "=";
  var peg$c3 = "render";
  var peg$c4 = "fog";
  var peg$c5 = "background";
  var peg$c6 = "post";
  var peg$c7 = "camera";
  var peg$c8 = "fft";
  var peg$c9 = "lights";
  var peg$c10 = ",";
  var peg$c11 = "[";
  var peg$c12 = "]";
  var peg$c13 = "(";
  var peg$c14 = ")";
  var peg$c15 = "++";
  var peg$c16 = "+++";
  var peg$c17 = "++++";
  var peg$c18 = "--";
  var peg$c19 = "---";
  var peg$c20 = "----";
  var peg$c21 = "**";
  var peg$c22 = "***";
  var peg$c23 = "****";
  var peg$c24 = "'";
  var peg$c25 = "::";
  var peg$c26 = ":";
  var peg$c27 = "@@";
  var peg$c28 = "@";
  var peg$c29 = ">>";
  var peg$c30 = ">";
  var peg$c31 = "###";
  var peg$c32 = "##";
  var peg$c33 = "#";
  var peg$c34 = "||";
  var peg$c35 = "time";
  var peg$c36 = "low";
  var peg$c37 = "mid";
  var peg$c38 = "high";
  var peg$c39 = "mousex";
  var peg$c40 = "mousey";
  var peg$c41 = "i";
  var peg$c42 = "sinn";
  var peg$c43 = "sin";
  var peg$c44 = "round";
  var peg$c45 = "cosn";
  var peg$c46 = "cos";
  var peg$c47 = "abs";
  var peg$c48 = "floor";
  var peg$c49 = "random";
  var peg$c50 = "ceil";
  var peg$c51 = "box";
  var peg$c52 = "capsule";
  var peg$c53 = "cone";
  var peg$c54 = "cylinder";
  var peg$c55 = "hex";
  var peg$c56 = "julia";
  var peg$c57 = "mandelbulb";
  var peg$c58 = "mandelbox";
  var peg$c59 = "mandalay";
  var peg$c60 = "KIFS";
  var peg$c61 = "octahedron";
  var peg$c62 = "plane";
  var peg$c63 = "quad";
  var peg$c64 = "roundbox";
  var peg$c65 = "sphere";
  var peg$c66 = "torus";
  var peg$c67 = "torus88";
  var peg$c68 = "torus82";
  var peg$c69 = "triangle";
  var peg$c70 = "blackhole";
  var peg$c71 = "white glow";
  var peg$c72 = "red";
  var peg$c73 = "green";
  var peg$c74 = "blue";
  var peg$c75 = "cyan";
  var peg$c76 = "magenta";
  var peg$c77 = "yellow";
  var peg$c78 = "white";
  var peg$c79 = "black";
  var peg$c80 = "grey";
  var peg$c81 = "glue";
  var peg$c82 = "inverse";
  var peg$c83 = "normal";
  var peg$c84 = "rainbow";
  var peg$c85 = "stripes";
  var peg$c86 = "dots";
  var peg$c87 = "zigzag";
  var peg$c88 = "truchet";
  var peg$c89 = "noise";
  var peg$c90 = "checkers";
  var peg$c91 = "voronoi";
  var peg$c92 = "cellular";
  var peg$c93 = "antialias";
  var peg$c94 = "bloom";
  var peg$c95 = "focus";
  var peg$c96 = "godrays";
  var peg$c97 = "edge";
  var peg$c98 = "invert";
  var peg$c99 = "blur";
  var peg$c100 = "-";
  var peg$c101 = ".";

  var peg$r0 = /^[%*-+\-\/\^]/;
  var peg$r1 = /^[xyz]/;
  var peg$r2 = /^[|~]/;
  var peg$r3 = /^[0-9]/;
  var peg$r4 = /^[a-zA-Z.]/;
  var peg$r5 = /^[\n\r]/;
  var peg$r6 = /^[ \t]/;

  var peg$e0 = peg$otherExpectation("out");
  var peg$e1 = peg$literalExpectation("//", false);
  var peg$e2 = peg$literalExpectation("\n", false);
  var peg$e3 = peg$anyExpectation();
  var peg$e4 = peg$otherExpectation("config");
  var peg$e5 = peg$literalExpectation("=", false);
  var peg$e6 = peg$literalExpectation("render", false);
  var peg$e7 = peg$literalExpectation("fog", false);
  var peg$e8 = peg$literalExpectation("background", false);
  var peg$e9 = peg$literalExpectation("post", false);
  var peg$e10 = peg$literalExpectation("camera", false);
  var peg$e11 = peg$literalExpectation("fft", false);
  var peg$e12 = peg$literalExpectation("lights", false);
  var peg$e13 = peg$literalExpectation(",", false);
  var peg$e14 = peg$otherExpectation("loop");
  var peg$e15 = peg$literalExpectation("[", false);
  var peg$e16 = peg$literalExpectation("]", false);
  var peg$e17 = peg$otherExpectation("assign");
  var peg$e18 = peg$otherExpectation("group");
  var peg$e19 = peg$literalExpectation("(", false);
  var peg$e20 = peg$literalExpectation(")", false);
  var peg$e21 = peg$otherExpectation("expr");
  var peg$e22 = peg$otherExpectation("union");
  var peg$e23 = peg$literalExpectation("++", false);
  var peg$e24 = peg$otherExpectation("runion");
  var peg$e25 = peg$literalExpectation("+++", false);
  var peg$e26 = peg$otherExpectation("sunion");
  var peg$e27 = peg$literalExpectation("++++", false);
  var peg$e28 = peg$otherExpectation("difference");
  var peg$e29 = peg$literalExpectation("--", false);
  var peg$e30 = peg$otherExpectation("rdifference");
  var peg$e31 = peg$literalExpectation("---", false);
  var peg$e32 = peg$otherExpectation("sdifference");
  var peg$e33 = peg$literalExpectation("----", false);
  var peg$e34 = peg$otherExpectation("intersection");
  var peg$e35 = peg$literalExpectation("**", false);
  var peg$e36 = peg$otherExpectation("rintersection");
  var peg$e37 = peg$literalExpectation("***", false);
  var peg$e38 = peg$otherExpectation("sintersection");
  var peg$e39 = peg$literalExpectation("****", false);
  var peg$e40 = peg$classExpectation(["%", ["*", "+"], "-", "/", "^"], false, false);
  var peg$e41 = peg$otherExpectation("math");
  var peg$e42 = peg$classExpectation(["x", "y", "z"], false, false);
  var peg$e43 = peg$literalExpectation("'", false);
  var peg$e44 = peg$literalExpectation("::", false);
  var peg$e45 = peg$literalExpectation(":", false);
  var peg$e46 = peg$literalExpectation("@@", false);
  var peg$e47 = peg$literalExpectation("@", false);
  var peg$e48 = peg$literalExpectation(">>", false);
  var peg$e49 = peg$literalExpectation(">", false);
  var peg$e50 = peg$literalExpectation("###", false);
  var peg$e51 = peg$literalExpectation("##", false);
  var peg$e52 = peg$literalExpectation("#", false);
  var peg$e53 = peg$literalExpectation("||", false);
  var peg$e54 = peg$classExpectation(["|", "~"], false, false);
  var peg$e55 = peg$otherExpectation("modop");
  var peg$e56 = peg$otherExpectation("operand");
  var peg$e57 = peg$otherExpectation("mathoperand");
  var peg$e58 = peg$literalExpectation("time", false);
  var peg$e59 = peg$literalExpectation("low", false);
  var peg$e60 = peg$literalExpectation("mid", false);
  var peg$e61 = peg$literalExpectation("high", false);
  var peg$e62 = peg$literalExpectation("mousex", false);
  var peg$e63 = peg$literalExpectation("mousey", false);
  var peg$e64 = peg$literalExpectation("i", false);
  var peg$e65 = peg$otherExpectation("geometries");
  var peg$e66 = peg$literalExpectation("sinn", false);
  var peg$e67 = peg$literalExpectation("sin", false);
  var peg$e68 = peg$literalExpectation("round", false);
  var peg$e69 = peg$literalExpectation("cosn", false);
  var peg$e70 = peg$literalExpectation("cos", false);
  var peg$e71 = peg$literalExpectation("abs", false);
  var peg$e72 = peg$literalExpectation("floor", false);
  var peg$e73 = peg$literalExpectation("random", false);
  var peg$e74 = peg$literalExpectation("ceil", false);
  var peg$e75 = peg$literalExpectation("box", false);
  var peg$e76 = peg$literalExpectation("capsule", false);
  var peg$e77 = peg$literalExpectation("cone", false);
  var peg$e78 = peg$literalExpectation("cylinder", false);
  var peg$e79 = peg$literalExpectation("hex", false);
  var peg$e80 = peg$literalExpectation("julia", false);
  var peg$e81 = peg$literalExpectation("mandelbulb", false);
  var peg$e82 = peg$literalExpectation("mandelbox", false);
  var peg$e83 = peg$literalExpectation("mandalay", false);
  var peg$e84 = peg$literalExpectation("KIFS", false);
  var peg$e85 = peg$literalExpectation("octahedron", false);
  var peg$e86 = peg$literalExpectation("plane", false);
  var peg$e87 = peg$literalExpectation("quad", false);
  var peg$e88 = peg$literalExpectation("roundbox", false);
  var peg$e89 = peg$literalExpectation("sphere", false);
  var peg$e90 = peg$literalExpectation("torus", false);
  var peg$e91 = peg$literalExpectation("torus88", false);
  var peg$e92 = peg$literalExpectation("torus82", false);
  var peg$e93 = peg$literalExpectation("triangle", false);
  var peg$e94 = peg$literalExpectation("blackhole", false);
  var peg$e95 = peg$literalExpectation("white glow", false);
  var peg$e96 = peg$literalExpectation("red", false);
  var peg$e97 = peg$literalExpectation("green", false);
  var peg$e98 = peg$literalExpectation("blue", false);
  var peg$e99 = peg$literalExpectation("cyan", false);
  var peg$e100 = peg$literalExpectation("magenta", false);
  var peg$e101 = peg$literalExpectation("yellow", false);
  var peg$e102 = peg$literalExpectation("white", false);
  var peg$e103 = peg$literalExpectation("black", false);
  var peg$e104 = peg$literalExpectation("grey", false);
  var peg$e105 = peg$literalExpectation("glue", false);
  var peg$e106 = peg$literalExpectation("inverse", false);
  var peg$e107 = peg$literalExpectation("normal", false);
  var peg$e108 = peg$literalExpectation("rainbow", false);
  var peg$e109 = peg$literalExpectation("stripes", false);
  var peg$e110 = peg$literalExpectation("dots", false);
  var peg$e111 = peg$literalExpectation("zigzag", false);
  var peg$e112 = peg$literalExpectation("truchet", false);
  var peg$e113 = peg$literalExpectation("noise", false);
  var peg$e114 = peg$literalExpectation("checkers", false);
  var peg$e115 = peg$literalExpectation("voronoi", false);
  var peg$e116 = peg$literalExpectation("cellular", false);
  var peg$e117 = peg$literalExpectation("antialias", false);
  var peg$e118 = peg$literalExpectation("bloom", false);
  var peg$e119 = peg$literalExpectation("focus", false);
  var peg$e120 = peg$literalExpectation("godrays", false);
  var peg$e121 = peg$literalExpectation("edge", false);
  var peg$e122 = peg$literalExpectation("invert", false);
  var peg$e123 = peg$literalExpectation("blur", false);
  var peg$e124 = peg$literalExpectation("-", false);
  var peg$e125 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e126 = peg$literalExpectation(".", false);
  var peg$e127 = peg$classExpectation([["a", "z"], ["A", "Z"], "."], false, false);
  var peg$e128 = peg$otherExpectation("line breaks");
  var peg$e129 = peg$classExpectation(["\n", "\r"], false, false);
  var peg$e130 = peg$otherExpectation("whitespace");
  var peg$e131 = peg$classExpectation([" ", "\t"], false, false);

  var peg$f0 = function(body) { 
  //console.log( body )
  return body
};
  var peg$f1 = function() { return ['comment'] };
  var peg$f2 = function(name, value) {
  return ['config', name, value ]
};
  var peg$f3 = function(fx) { 
   return fx.map( f => [ f[0], f[1] === null ? null : f[1][1] ] ) 
};
  var peg$f4 = function(values, b) { 
  
  if( b===null ) {
    throw SyntaxError('Are you missing a closing parenthesis for your list?')
  }
  return { name:'list', values } 
};
  var peg$f5 = function(obj, num, mods, d) {
  if( d === null ) throw SyntaxError( 'Did you forget to close your loop?' )
  mods = mods.map( v => [ v[0], v[2] ] )
  return ['loop', obj, num, mods]
};
  var peg$f6 = function(name, statement) {
  if( statement === null ) {
    throw SyntaxError(`You didn't assign anything to ${name}.`)
  }
  return [ 'assignment', name, statement ]
};
  var peg$f7 = function(a) { return a };
  var peg$f8 = function(body) { 
  return body 
};
  var peg$f9 = function(a, args, b) { 
  if( a===null ) { 
    throw SyntaxError(`Your union is missing an argument to the left of the ++ operator.`)
  }
  if( b===null ) { 
    throw SyntaxError(`Your union is missing an argument to the right of the ++ operator.`)
  }
  return ['combinator', 'Union', a,b,args ] 
};
  var peg$f10 = function(a, args, b) {
  if( a===null ) { 
    throw SyntaxError(`Your round union is missing an argument to the left of the ++ operator.`)
  }
  if( b===null ) { 
    throw SyntaxError(`Your round union is missing an argument to the right of the +++ operator.`)
  }
  return ['combinator', 'RoundUnion', a,b,args ] 
};
  var peg$f11 = function(a, args, b) { 
  if( a===null ) { 
    throw SyntaxError(`Your stairs union is missing an argument to the left of the ++ operator.`)
  }
  if( b===null ) { 
    throw SyntaxError(`Your stairs union is missing an argument to the right of the ++++ operator.`)
  }
  return ['combinator', 'StairsUnion', a,b,args ] 
};
  var peg$f12 = function(a, args, b) {
  if( a===null ) { 
    throw SyntaxError(`Your difference is missing an argument to the left of the -- operator.`)
  }
  if( b===null ) { 
    throw SyntaxError(`Your difference is missing an argument to the right of the -- operator.`)
  }
  return ['combinator', 'Difference', a,b, args] 
};
  var peg$f13 = function(a, args, b) { 
  if( a===null ) { 
    throw SyntaxError(`Your round difference is missing an argument to the left of the --- operator.`)
  }
  if( b===null ) { 
    throw SyntaxError(`Your round difference is missing an argument to the right of the --- operator.`)
  }
  return ['combinator', 'RoundDifference', a,b,args ] 
};
  var peg$f14 = function(a, args, b) { 
  if( a===null ) { 
    throw SyntaxError(`Your stairs difference is missing an argument to the left of the ---- operator.`)
  }
  if( b===null ) { 
    throw SyntaxError(`Your stairs difference is missing an argument to the right of the ---- operator.`)
  }

  return ['combinator', 'StairsDifference', a,b,args ] 
};
  var peg$f15 = function(a, args, b) {
  if( a===null ) { 
    throw SyntaxError(`Your intersection is missing an argument to the left of the ** operator.`)
  }
  if( b===null ) { 
    throw SyntaxError(`Your intersection is missing an argument to the right of the ** operator.`)
  }
  return ['combinator', 'Intersection', a,b,args ]
};
  var peg$f16 = function(a, args, b) { 
  if( a===null ) { 
    throw SyntaxError(`Your round intersection is missing an argument to the left of the *** operator.`)
  }
  if( b===null ) { 
     throw SyntaxError(`Your round intersection is missing an argument to the right of the *** operator.`)
  }

  return ['combinator', 'RoundIntersection', a,b,args ] 
};
  var peg$f17 = function(a, args, b) { 
  if( a===null ) { 
    throw SyntaxError(`Your stairs intersection is missing an argument to the left of the **** operator.`)
  }
  if( b===null ) { 
    throw SyntaxError(`Your stairs intersection is missing an argument to the right of the **** operator.`)
  }

  return ['combinator', 'StairsIntersection', a,b,args ] 
};
  var peg$f18 = function(a, b) {
  // operations are represented as arrays. 
  // if b is instead a number, it is the final term
  // in a potential sequence of operations
  const isFinalTerm = b === null
  //if( !isFinalTerm && b[2] === null ) {
  //  throw SyntaxError(`You're missing a value to the right of your ${b[0]} operator.`)
  //}
  return isFinalTerm ? a : ['math',b[0], a,b[2] ] 
};
  var peg$f19 = function(a, b) {
  const isBNull = b === null
  if( !isBNull ) {
    const isFinalTerm = b !== null && b[0] === undefined
    return isFinalTerm ? a : ['mod', a, b.map(v=>[v[0],v[2]]) ] 
  }else{
    return a
  }
};
  var peg$f20 = function(alist) { return alist };
  var peg$f21 = function(name, a) {
  return ['math', name, a ]
};
  var peg$f22 = function(name, a) {
  if( a !== null && a[2] === null ) {
    throw SyntaxError(`Are you missing a right parenthesis when creating your ${name}?`)
  }
  return ['geometry', name[0].toUpperCase() + name.slice(1), a===undefined||a===null ? null : a[1] ]
};
  var peg$f23 = function(name) { return name };
  var peg$f24 = function(name) { return name };
  var peg$f25 = function(name, args) {
  if( args === null ) {
    return [ name, args ]
  }else{
    if( args[1].length === 0 ) {
      return [name, null ]
    }
    return [name, ...(args[1].map( v => v[0] ))]
  }
};
  var peg$f26 = function(name) { return name };
  var peg$f27 = function(name) { return name };
  var peg$f28 = function(a) { return ['vec', a] };
  var peg$f29 = function(l) {
  return l.map( v => v[0] )
};
  var peg$f30 = function() { return ')' };
  var peg$f31 = function() { return '(' };
  var peg$f32 = function() { return +text() };
  var peg$f33 = function(num) { return parseInt( num ) };
  var peg$f34 = function(letters) { return letters.join('') };
  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;

  var peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseout() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = peg$parsestatement();
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsestatement();
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }

    return s0;
  }

  function peg$parsestatement() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = [];
    s3 = peg$parse__();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$parse__();
    }
    s3 = peg$parsecomment();
    if (s3 === peg$FAILED) {
      s3 = peg$parseconfig();
      if (s3 === peg$FAILED) {
        s3 = peg$parseassignment();
        if (s3 === peg$FAILED) {
          s3 = peg$parseexpr();
        }
      }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parse_();
      s5 = [];
      s6 = peg$parse__();
      while (s6 !== peg$FAILED) {
        s5.push(s6);
        s6 = peg$parse__();
      }
      peg$savedPos = s0;
      s0 = peg$f0(s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecomment() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c0) {
      s1 = peg$c0;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 10) {
        s6 = peg$c1;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      peg$silentFails--;
      if (s6 === peg$FAILED) {
        s5 = undefined;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 10) {
          s6 = peg$c1;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e2); }
        }
        peg$silentFails--;
        if (s6 === peg$FAILED) {
          s5 = undefined;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 10) {
        s5 = peg$c1;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f1();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseconfig() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseconfig_name();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 61) {
        s3 = peg$c2;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseword();
        if (s5 === peg$FAILED) {
          s5 = peg$parsepp();
          if (s5 === peg$FAILED) {
            s5 = peg$parselistparen();
            if (s5 === peg$FAILED) {
              s5 = peg$parsenumber();
            }
          }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f2(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }

    return s0;
  }

  function peg$parseconfig_name() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c3) {
      s0 = peg$c3;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c4) {
        s0 = peg$c4;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c5) {
          s0 = peg$c5;
          peg$currPos += 10;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e8); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c6) {
            s0 = peg$c6;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c7) {
              s0 = peg$c7;
              peg$currPos += 6;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e10); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c8) {
                s0 = peg$c8;
                peg$currPos += 3;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e11); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c9) {
                  s0 = peg$c9;
                  peg$currPos += 6;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e12); }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsepp() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parselp();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parsepost();
      if (s4 !== peg$FAILED) {
        s5 = peg$currPos;
        s6 = peg$parselp();
        if (s6 !== peg$FAILED) {
          s7 = peg$parsearguments();
          if (s7 !== peg$FAILED) {
            s8 = peg$parserp();
            if (s8 !== peg$FAILED) {
              s6 = [s6, s7, s8];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c10;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e13); }
        }
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s4 = [s4, s5, s6];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsepost();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parselp();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsearguments();
              if (s7 !== peg$FAILED) {
                s8 = peg$parserp();
                if (s8 !== peg$FAILED) {
                  s6 = [s6, s7, s8];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s6 = peg$c10;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e13); }
            }
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            s4 = [s4, s5, s6];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parserp();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f3(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselistparen() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parselp();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsearguments();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parserp();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f4(s3, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseloop() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 91) {
      s2 = peg$c11;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseoperation();
      if (s4 === peg$FAILED) {
        s4 = peg$parsegroup();
        if (s4 === peg$FAILED) {
          s4 = peg$parsegeometry();
        }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseint();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = [];
          s9 = peg$currPos;
          s10 = peg$parsemodspecial();
          if (s10 === peg$FAILED) {
            s10 = peg$parsemodchar();
          }
          if (s10 !== peg$FAILED) {
            s11 = peg$parse_();
            s12 = peg$parsemathoperation();
            if (s12 === peg$FAILED) {
              s12 = peg$parselistparen();
            }
            if (s12 === peg$FAILED) {
              s12 = null;
            }
            s10 = [s10, s11, s12];
            s9 = s10;
          } else {
            peg$currPos = s9;
            s9 = peg$FAILED;
          }
          while (s9 !== peg$FAILED) {
            s8.push(s9);
            s9 = peg$currPos;
            s10 = peg$parsemodspecial();
            if (s10 === peg$FAILED) {
              s10 = peg$parsemodchar();
            }
            if (s10 !== peg$FAILED) {
              s11 = peg$parse_();
              s12 = peg$parsemathoperation();
              if (s12 === peg$FAILED) {
                s12 = peg$parselistparen();
              }
              if (s12 === peg$FAILED) {
                s12 = null;
              }
              s10 = [s10, s11, s12];
              s9 = s10;
            } else {
              peg$currPos = s9;
              s9 = peg$FAILED;
            }
          }
          s9 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 93) {
            s10 = peg$c12;
            peg$currPos++;
          } else {
            s10 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e16); }
          }
          if (s10 === peg$FAILED) {
            s10 = null;
          }
          s11 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f5(s4, s6, s8, s10);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }

    return s0;
  }

  function peg$parseassignment() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseword();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 61) {
        s3 = peg$c2;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseexpr();
        if (s5 === peg$FAILED) {
          s5 = peg$parsevector();
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f6(s1, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }

    return s0;
  }

  function peg$parsevector() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parselp();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsearguments();
      if (s2 !== peg$FAILED) {
        s3 = peg$parserp();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f7(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsegroup() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 40) {
      s2 = peg$c13;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseexpr();
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s4 = peg$c14;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e20); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f8(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }

    return s0;
  }

  function peg$parseexpr() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseoperation();
    if (s0 === peg$FAILED) {
      s0 = peg$parsegroup();
      if (s0 === peg$FAILED) {
        s0 = peg$parseloop();
        if (s0 === peg$FAILED) {
          s0 = peg$parsegeometry();
          if (s0 === peg$FAILED) {
            s0 = peg$parseoperand();
            if (s0 === peg$FAILED) {
              s0 = peg$parsemathoperand();
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }

    return s0;
  }

  function peg$parseoperation() {
    var s0;

    s0 = peg$parsestairsunion();
    if (s0 === peg$FAILED) {
      s0 = peg$parseroundunion();
      if (s0 === peg$FAILED) {
        s0 = peg$parseunion();
        if (s0 === peg$FAILED) {
          s0 = peg$parsestairsdifference();
          if (s0 === peg$FAILED) {
            s0 = peg$parserounddifference();
            if (s0 === peg$FAILED) {
              s0 = peg$parsedifference();
              if (s0 === peg$FAILED) {
                s0 = peg$parsestairsintersection();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseroundintersection();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseintersection();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsemodoperation();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseunion() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseoperand();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parse_();
    if (input.substr(peg$currPos, 2) === peg$c15) {
      s3 = peg$c15;
      peg$currPos += 2;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parseoperandargs();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      s6 = peg$parseexpr();
      if (s6 === peg$FAILED) {
        s6 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f9(s1, s4, s6);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }

    return s0;
  }

  function peg$parseroundunion() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseoperand();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 3) === peg$c16) {
        s3 = peg$c16;
        peg$currPos += 3;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseoperandargs();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        s6 = peg$parseexpr();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f10(s1, s4, s6);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }

    return s0;
  }

  function peg$parsestairsunion() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseoperand();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 4) === peg$c17) {
        s3 = peg$c17;
        peg$currPos += 4;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e27); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseoperandargs();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        s6 = peg$parseexpr();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f11(s1, s4, s6);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }

    return s0;
  }

  function peg$parsedifference() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseoperand();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parse_();
    if (input.substr(peg$currPos, 2) === peg$c18) {
      s3 = peg$c18;
      peg$currPos += 2;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parseoperandargs();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      s6 = peg$parseexpr();
      if (s6 === peg$FAILED) {
        s6 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f12(s1, s4, s6);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }

    return s0;
  }

  function peg$parserounddifference() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseoperand();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parse_();
    if (input.substr(peg$currPos, 3) === peg$c19) {
      s3 = peg$c19;
      peg$currPos += 3;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parseoperandargs();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      s6 = peg$parseexpr();
      if (s6 === peg$FAILED) {
        s6 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f13(s1, s4, s6);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }

    return s0;
  }

  function peg$parsestairsdifference() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseoperand();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parse_();
    if (input.substr(peg$currPos, 4) === peg$c20) {
      s3 = peg$c20;
      peg$currPos += 4;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parseoperandargs();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      s6 = peg$parseexpr();
      if (s6 === peg$FAILED) {
        s6 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f14(s1, s4, s6);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }

    return s0;
  }

  function peg$parseintersection() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseoperand();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parse_();
    if (input.substr(peg$currPos, 2) === peg$c21) {
      s3 = peg$c21;
      peg$currPos += 2;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parseoperandargs();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      s6 = peg$parseexpr();
      if (s6 === peg$FAILED) {
        s6 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f15(s1, s4, s6);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }

    return s0;
  }

  function peg$parseroundintersection() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseoperand();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parse_();
    if (input.substr(peg$currPos, 3) === peg$c22) {
      s3 = peg$c22;
      peg$currPos += 3;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parseoperandargs();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      s6 = peg$parseexpr();
      if (s6 === peg$FAILED) {
        s6 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f16(s1, s4, s6);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }

    return s0;
  }

  function peg$parsestairsintersection() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseoperand();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parse_();
    if (input.substr(peg$currPos, 4) === peg$c23) {
      s3 = peg$c23;
      peg$currPos += 4;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parseoperandargs();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      s6 = peg$parseexpr();
      if (s6 === peg$FAILED) {
        s6 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f17(s1, s4, s6);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }

    return s0;
  }

  function peg$parsemathchar() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r0.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }

    return s0;
  }

  function peg$parsemathoperation() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsemathoperand();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$currPos;
      s4 = peg$parsemathchar();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parsemathoperation();
        if (s6 !== peg$FAILED) {
          s4 = [s4, s5, s6];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f18(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e41); }
    }

    return s0;
  }

  function peg$parsemodspecial() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsemodchar();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parsemoddims();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsemoddims();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemoddims() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r1.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e42); }
    }

    return s0;
  }

  function peg$parsemodchar() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 39) {
      s0 = peg$c24;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e43); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c25) {
        s0 = peg$c25;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e44); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s0 = peg$c26;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e45); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c27) {
            s0 = peg$c27;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e46); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 64) {
              s0 = peg$c28;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e47); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c29) {
                s0 = peg$c29;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e48); }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 62) {
                  s0 = peg$c30;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e49); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c31) {
                    s0 = peg$c31;
                    peg$currPos += 3;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e50); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c32) {
                      s0 = peg$c32;
                      peg$currPos += 2;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e51); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 35) {
                        s0 = peg$c33;
                        peg$currPos++;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e52); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c34) {
                          s0 = peg$c34;
                          peg$currPos += 2;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e53); }
                        }
                        if (s0 === peg$FAILED) {
                          s0 = input.charAt(peg$currPos);
                          if (peg$r2.test(s0)) {
                            peg$currPos++;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e54); }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsemodoperation() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsegeometry();
    if (s1 === peg$FAILED) {
      s1 = peg$parsegroup();
      if (s1 === peg$FAILED) {
        s1 = peg$parseloop();
        if (s1 === peg$FAILED) {
          s1 = peg$parseword();
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parsemodspecial();
      if (s5 === peg$FAILED) {
        s5 = peg$parsemodchar();
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parsematerial();
        if (s7 === peg$FAILED) {
          s7 = peg$parsetexture();
          if (s7 === peg$FAILED) {
            s7 = peg$parselistparen();
            if (s7 === peg$FAILED) {
              s7 = peg$parsemathoperation();
              if (s7 === peg$FAILED) {
                s7 = peg$parsemodoperation();
              }
            }
          }
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s5 = [s5, s6, s7];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parsemodspecial();
        if (s5 === peg$FAILED) {
          s5 = peg$parsemodchar();
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parsematerial();
          if (s7 === peg$FAILED) {
            s7 = peg$parsetexture();
            if (s7 === peg$FAILED) {
              s7 = peg$parselistparen();
              if (s7 === peg$FAILED) {
                s7 = peg$parsemathoperation();
                if (s7 === peg$FAILED) {
                  s7 = peg$parsemodoperation();
                }
              }
            }
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s5 = [s5, s6, s7];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f19(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }

    return s0;
  }

  function peg$parseoperandargs() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parselp();
    if (s1 !== peg$FAILED) {
      s2 = peg$parselist();
      if (s2 !== peg$FAILED) {
        s3 = peg$parserp();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f20(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseoperand() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsemodoperation();
    if (s0 === peg$FAILED) {
      s0 = peg$parsegroup();
      if (s0 === peg$FAILED) {
        s0 = peg$parsegeometry();
        if (s0 === peg$FAILED) {
          s0 = peg$parseloop();
          if (s0 === peg$FAILED) {
            s0 = peg$parsefunction();
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e56); }
    }

    return s0;
  }

  function peg$parsemathoperand() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsenumber();
    if (s0 === peg$FAILED) {
      s0 = peg$parsevariable();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefunction();
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }

    return s0;
  }

  function peg$parsevariable() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c35) {
      s0 = peg$c35;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c36) {
        s0 = peg$c36;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e59); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c37) {
          s0 = peg$c37;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e60); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c38) {
            s0 = peg$c38;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e61); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c39) {
              s0 = peg$c39;
              peg$currPos += 6;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e62); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c40) {
                s0 = peg$c40;
                peg$currPos += 6;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e63); }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 105) {
                  s0 = peg$c41;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e64); }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsefunction() {
    var s0;

    s0 = peg$parsemaths();
    if (s0 === peg$FAILED) {
      s0 = peg$parsegeometry();
    }

    return s0;
  }

  function peg$parsemaths() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsemath();
    if (s1 !== peg$FAILED) {
      s2 = peg$parselp();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsearguments();
        if (s3 !== peg$FAILED) {
          s4 = peg$parserp();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f21(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e41); }
    }

    return s0;
  }

  function peg$parsegeometry() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsegeometry_name();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parselp();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsearguments();
        if (s4 !== peg$FAILED) {
          s5 = peg$parserp();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s3 = [s3, s4, s5];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f22(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e65); }
    }

    return s0;
  }

  function peg$parsemath() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c42) {
      s0 = peg$c42;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e66); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c43) {
        s0 = peg$c43;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e67); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c44) {
          s0 = peg$c44;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e68); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c45) {
            s0 = peg$c45;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e69); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c46) {
              s0 = peg$c46;
              peg$currPos += 3;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e70); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c47) {
                s0 = peg$c47;
                peg$currPos += 3;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e71); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c48) {
                  s0 = peg$c48;
                  peg$currPos += 5;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e72); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c49) {
                    s0 = peg$c49;
                    peg$currPos += 6;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e73); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c50) {
                      s0 = peg$c50;
                      peg$currPos += 4;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e74); }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsegeometry_name() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 3) === peg$c51) {
      s2 = peg$c51;
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e75); }
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c52) {
        s2 = peg$c52;
        peg$currPos += 7;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e76); }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c53) {
          s2 = peg$c53;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e77); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c54) {
            s2 = peg$c54;
            peg$currPos += 8;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e78); }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c55) {
              s2 = peg$c55;
              peg$currPos += 3;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e79); }
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c56) {
                s2 = peg$c56;
                peg$currPos += 5;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e80); }
              }
              if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 10) === peg$c57) {
                  s2 = peg$c57;
                  peg$currPos += 10;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e81); }
                }
                if (s2 === peg$FAILED) {
                  if (input.substr(peg$currPos, 9) === peg$c58) {
                    s2 = peg$c58;
                    peg$currPos += 9;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e82); }
                  }
                  if (s2 === peg$FAILED) {
                    if (input.substr(peg$currPos, 8) === peg$c59) {
                      s2 = peg$c59;
                      peg$currPos += 8;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e83); }
                    }
                    if (s2 === peg$FAILED) {
                      if (input.substr(peg$currPos, 4) === peg$c60) {
                        s2 = peg$c60;
                        peg$currPos += 4;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e84); }
                      }
                      if (s2 === peg$FAILED) {
                        if (input.substr(peg$currPos, 10) === peg$c61) {
                          s2 = peg$c61;
                          peg$currPos += 10;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e85); }
                        }
                        if (s2 === peg$FAILED) {
                          if (input.substr(peg$currPos, 5) === peg$c62) {
                            s2 = peg$c62;
                            peg$currPos += 5;
                          } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e86); }
                          }
                          if (s2 === peg$FAILED) {
                            if (input.substr(peg$currPos, 4) === peg$c63) {
                              s2 = peg$c63;
                              peg$currPos += 4;
                            } else {
                              s2 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e87); }
                            }
                            if (s2 === peg$FAILED) {
                              if (input.substr(peg$currPos, 8) === peg$c64) {
                                s2 = peg$c64;
                                peg$currPos += 8;
                              } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e88); }
                              }
                              if (s2 === peg$FAILED) {
                                if (input.substr(peg$currPos, 6) === peg$c65) {
                                  s2 = peg$c65;
                                  peg$currPos += 6;
                                } else {
                                  s2 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e89); }
                                }
                                if (s2 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 5) === peg$c66) {
                                    s2 = peg$c66;
                                    peg$currPos += 5;
                                  } else {
                                    s2 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e90); }
                                  }
                                  if (s2 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 7) === peg$c67) {
                                      s2 = peg$c67;
                                      peg$currPos += 7;
                                    } else {
                                      s2 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e91); }
                                    }
                                    if (s2 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 7) === peg$c68) {
                                        s2 = peg$c68;
                                        peg$currPos += 7;
                                      } else {
                                        s2 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e92); }
                                      }
                                      if (s2 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 8) === peg$c69) {
                                          s2 = peg$c69;
                                          peg$currPos += 8;
                                        } else {
                                          s2 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e93); }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f23(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsematerial() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 9) === peg$c70) {
      s2 = peg$c70;
      peg$currPos += 9;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e94); }
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 10) === peg$c71) {
        s2 = peg$c71;
        peg$currPos += 10;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e95); }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c72) {
          s2 = peg$c72;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e96); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c73) {
            s2 = peg$c73;
            peg$currPos += 5;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e97); }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c74) {
              s2 = peg$c74;
              peg$currPos += 4;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e98); }
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c75) {
                s2 = peg$c75;
                peg$currPos += 4;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e99); }
              }
              if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 7) === peg$c76) {
                  s2 = peg$c76;
                  peg$currPos += 7;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e100); }
                }
                if (s2 === peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c77) {
                    s2 = peg$c77;
                    peg$currPos += 6;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e101); }
                  }
                  if (s2 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5) === peg$c78) {
                      s2 = peg$c78;
                      peg$currPos += 5;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e102); }
                    }
                    if (s2 === peg$FAILED) {
                      if (input.substr(peg$currPos, 5) === peg$c79) {
                        s2 = peg$c79;
                        peg$currPos += 5;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e103); }
                      }
                      if (s2 === peg$FAILED) {
                        if (input.substr(peg$currPos, 4) === peg$c80) {
                          s2 = peg$c80;
                          peg$currPos += 4;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e104); }
                        }
                        if (s2 === peg$FAILED) {
                          if (input.substr(peg$currPos, 4) === peg$c81) {
                            s2 = peg$c81;
                            peg$currPos += 4;
                          } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e105); }
                          }
                          if (s2 === peg$FAILED) {
                            if (input.substr(peg$currPos, 7) === peg$c82) {
                              s2 = peg$c82;
                              peg$currPos += 7;
                            } else {
                              s2 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e106); }
                            }
                            if (s2 === peg$FAILED) {
                              if (input.substr(peg$currPos, 6) === peg$c83) {
                                s2 = peg$c83;
                                peg$currPos += 6;
                              } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e107); }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f24(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetexture() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parsetexture_name();
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      s4 = peg$parselp();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$currPos;
        s7 = peg$parsemathoperation();
        if (s7 === peg$FAILED) {
          s7 = peg$parsevec();
        }
        if (s7 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s8 = peg$c10;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          s7 = [s7, s8];
          s6 = s7;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          s7 = peg$parsemathoperation();
          if (s7 === peg$FAILED) {
            s7 = peg$parsevec();
          }
          if (s7 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s8 = peg$c10;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e13); }
            }
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            s7 = [s7, s8];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        }
        s6 = peg$parserp();
        if (s6 !== peg$FAILED) {
          s4 = [s4, s5, s6];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f25(s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetexture_name() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 7) === peg$c84) {
      s2 = peg$c84;
      peg$currPos += 7;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e108); }
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c85) {
        s2 = peg$c85;
        peg$currPos += 7;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e109); }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c86) {
          s2 = peg$c86;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e110); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c87) {
            s2 = peg$c87;
            peg$currPos += 6;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e111); }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c88) {
              s2 = peg$c88;
              peg$currPos += 7;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e112); }
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c89) {
                s2 = peg$c89;
                peg$currPos += 5;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e113); }
              }
              if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 8) === peg$c90) {
                  s2 = peg$c90;
                  peg$currPos += 8;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e114); }
                }
                if (s2 === peg$FAILED) {
                  if (input.substr(peg$currPos, 7) === peg$c91) {
                    s2 = peg$c91;
                    peg$currPos += 7;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e115); }
                  }
                  if (s2 === peg$FAILED) {
                    if (input.substr(peg$currPos, 8) === peg$c92) {
                      s2 = peg$c92;
                      peg$currPos += 8;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e116); }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f26(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepost() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 9) === peg$c93) {
      s2 = peg$c93;
      peg$currPos += 9;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e117); }
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c94) {
        s2 = peg$c94;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e118); }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c95) {
          s2 = peg$c95;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e119); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c96) {
            s2 = peg$c96;
            peg$currPos += 7;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e120); }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c97) {
              s2 = peg$c97;
              peg$currPos += 4;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e121); }
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c98) {
                s2 = peg$c98;
                peg$currPos += 6;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e122); }
              }
              if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c99) {
                  s2 = peg$c99;
                  peg$currPos += 4;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e123); }
                }
              }
            }
          }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f27(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevec() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parselp();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsearguments();
      if (s2 !== peg$FAILED) {
        s3 = peg$parserp();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f28(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsearguments() {
    var s0;

    s0 = peg$parselist();
    if (s0 === peg$FAILED) {
      s0 = peg$parse_();
    }

    return s0;
  }

  function peg$parselist() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parseargument();
    if (s3 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 44) {
        s4 = peg$c10;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e13); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      s3 = [s3, s4, s5];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parseargument();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s4 = peg$c10;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = peg$parse_();
          s3 = [s3, s4, s5];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f29(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseargument() {
    var s0;

    s0 = peg$parsemathoperation();
    if (s0 === peg$FAILED) {
      s0 = peg$parsemathoperand();
      if (s0 === peg$FAILED) {
        s0 = peg$parsevec();
      }
    }

    return s0;
  }

  function peg$parserp() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 41) {
      s2 = peg$c14;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f30();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselp() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 40) {
      s2 = peg$c13;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f31();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenumber() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c100;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e124); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$currPos;
    s3 = [];
    s4 = input.charAt(peg$currPos);
    if (peg$r3.test(s4)) {
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e125); }
    }
    if (s4 !== peg$FAILED) {
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = input.charAt(peg$currPos);
        if (peg$r3.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e125); }
        }
      }
    } else {
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s4 = peg$c101;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e126); }
      }
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = input.charAt(peg$currPos);
        if (peg$r3.test(s6)) {
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e125); }
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = input.charAt(peg$currPos);
          if (peg$r3.test(s6)) {
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e125); }
          }
        }
        s3 = [s3, s4, s5];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 === peg$FAILED) {
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c101;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e126); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = [];
      s5 = input.charAt(peg$currPos);
      if (peg$r3.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e125); }
      }
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = input.charAt(peg$currPos);
          if (peg$r3.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e125); }
          }
        }
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f32();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseint() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (peg$r3.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e125); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r3.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e125); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f33(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseword() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = [];
    s3 = peg$parsechar();
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsechar();
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f34(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsechar() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r4.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e127); }
    }

    return s0;
  }

  function peg$parse__() {
    var s0, s1;

    peg$silentFails++;
    s0 = input.charAt(peg$currPos);
    if (peg$r5.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e129); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e128); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r6.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e131); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = input.charAt(peg$currPos);
      if (peg$r6.test(s1)) {
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e131); }
      }
    }
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e130); }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos
    });
  }
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

  root.walking = {
    StartRules: ["out"],
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
})(this);
